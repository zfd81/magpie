// Code generated by protoc-gen-go. DO NOT EDIT.
// source: system.proto

package magpiepb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RpcRequest struct {
	Params               map[string]string `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data                 string            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RpcRequest) Reset()         { *m = RpcRequest{} }
func (m *RpcRequest) String() string { return proto.CompactTextString(m) }
func (*RpcRequest) ProtoMessage()    {}
func (*RpcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{0}
}

func (m *RpcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcRequest.Unmarshal(m, b)
}
func (m *RpcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcRequest.Marshal(b, m, deterministic)
}
func (m *RpcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcRequest.Merge(m, src)
}
func (m *RpcRequest) XXX_Size() int {
	return xxx_messageInfo_RpcRequest.Size(m)
}
func (m *RpcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcRequest proto.InternalMessageInfo

func (m *RpcRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *RpcRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Entry struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Team                 string   `protobuf:"bytes,3,opt,name=team,proto3" json:"team,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Port                 int64    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Timestamp            string   `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{1}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Entry) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Entry) GetTeam() string {
	if m != nil {
		return m.Team
	}
	return ""
}

func (m *Entry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Entry) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Entry) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type RpcResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcResponse) Reset()         { *m = RpcResponse{} }
func (m *RpcResponse) String() string { return proto.CompactTextString(m) }
func (*RpcResponse) ProtoMessage()    {}
func (*RpcResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{2}
}

func (m *RpcResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcResponse.Unmarshal(m, b)
}
func (m *RpcResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcResponse.Marshal(b, m, deterministic)
}
func (m *RpcResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcResponse.Merge(m, src)
}
func (m *RpcResponse) XXX_Size() int {
	return xxx_messageInfo_RpcResponse.Size(m)
}
func (m *RpcResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcResponse proto.InternalMessageInfo

func (m *RpcResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RpcResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RpcResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*RpcRequest)(nil), "RpcRequest")
	proto.RegisterMapType((map[string]string)(nil), "RpcRequest.ParamsEntry")
	proto.RegisterType((*Entry)(nil), "Entry")
	proto.RegisterType((*RpcResponse)(nil), "RpcResponse")
}

func init() { proto.RegisterFile("system.proto", fileDescriptor_86a7260ebdc12f47) }

var fileDescriptor_86a7260ebdc12f47 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6a, 0xe3, 0x30,
	0x10, 0x86, 0x57, 0x71, 0xe4, 0x90, 0x71, 0x16, 0x16, 0x11, 0x58, 0x11, 0x16, 0x36, 0x98, 0x65,
	0xc9, 0x86, 0xc5, 0x81, 0xec, 0x65, 0xdb, 0x63, 0x93, 0xd2, 0x4b, 0xa0, 0xc5, 0xe9, 0xa9, 0x37,
	0x39, 0x1e, 0x82, 0xa9, 0x6d, 0xa9, 0x92, 0x52, 0xea, 0x77, 0xe8, 0xa5, 0x6f, 0xd3, 0xc7, 0x2b,
	0x96, 0x93, 0x26, 0x94, 0x12, 0x72, 0xfb, 0xff, 0x99, 0x6f, 0x34, 0xbf, 0x84, 0xa0, 0x67, 0x2a,
	0x63, 0xb1, 0x88, 0x94, 0x96, 0x56, 0x86, 0xcf, 0x04, 0x20, 0x56, 0xab, 0x18, 0x1f, 0x36, 0x68,
	0x2c, 0x9b, 0x80, 0xaf, 0x84, 0x16, 0x85, 0xe1, 0x64, 0xe8, 0x8d, 0x82, 0xe9, 0xf7, 0x68, 0xdf,
	0x8c, 0x6e, 0x5c, 0xe7, 0xb2, 0xb4, 0xba, 0x8a, 0xb7, 0x18, 0x63, 0xd0, 0x4e, 0x85, 0x15, 0xbc,
	0x35, 0x24, 0xa3, 0x6e, 0xec, 0xf4, 0xe0, 0x0c, 0x82, 0x03, 0x94, 0x7d, 0x03, 0xef, 0x1e, 0x2b,
	0x4e, 0x1c, 0x51, 0x4b, 0xd6, 0x07, 0xfa, 0x28, 0xf2, 0x0d, 0x6e, 0xa7, 0x1a, 0x73, 0xde, 0xfa,
	0x4f, 0xc2, 0x17, 0x02, 0xb4, 0x99, 0xea, 0x03, 0xcd, 0xca, 0x14, 0x9f, 0xdc, 0x5c, 0x3b, 0x6e,
	0xcc, 0x67, 0xeb, 0xea, 0x9a, 0x45, 0x51, 0x70, 0xaf, 0xa9, 0xd5, 0x9a, 0x71, 0xe8, 0x88, 0x34,
	0xd5, 0x68, 0x0c, 0x6f, 0xbb, 0xf2, 0xce, 0xd6, 0xb4, 0x92, 0xda, 0x72, 0x3a, 0x24, 0x23, 0x2f,
	0x76, 0x9a, 0xfd, 0x80, 0xae, 0xcd, 0x0a, 0x34, 0x56, 0x14, 0x8a, 0xfb, 0x8e, 0xdf, 0x17, 0xc2,
	0x6b, 0x08, 0xdc, 0x23, 0x18, 0x25, 0x4b, 0x83, 0xf5, 0x01, 0x2b, 0x99, 0xa2, 0xcb, 0x45, 0x63,
	0xa7, 0xeb, 0x75, 0x05, 0x1a, 0x23, 0xd6, 0xbb, 0x2b, 0xed, 0xec, 0x7b, 0x60, 0x6f, 0x1f, 0x78,
	0xba, 0x84, 0xce, 0xd2, 0x4a, 0x5d, 0xb7, 0x43, 0xf0, 0xae, 0xd0, 0xb2, 0xe0, 0xe0, 0x99, 0x07,
	0xbd, 0xe8, 0x60, 0x5d, 0xf8, 0x85, 0xfd, 0x02, 0x3a, 0x93, 0x9b, 0xf2, 0x38, 0x35, 0x7d, 0x25,
	0x40, 0x6f, 0x45, 0x92, 0x23, 0x1b, 0x43, 0x30, 0xd3, 0x28, 0x2c, 0x36, 0xf6, 0xe8, 0xd9, 0x63,
	0x08, 0xe6, 0x98, 0xe3, 0x49, 0xec, 0x5f, 0xf8, 0x3a, 0x47, 0xb3, 0xd2, 0x59, 0x72, 0x0a, 0xfd,
	0x07, 0x60, 0x91, 0x19, 0xeb, 0x48, 0x73, 0x3c, 0xfa, 0x6f, 0xf0, 0x16, 0x72, 0xcd, 0x7e, 0x02,
	0x15, 0x4a, 0xe5, 0x15, 0xf3, 0x23, 0xf7, 0x05, 0x3e, 0x72, 0x17, 0xc1, 0x5d, 0x77, 0x52, 0x88,
	0xb5, 0xca, 0x50, 0x25, 0x89, 0xef, 0xfe, 0xef, 0xbf, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b,
	0x8e, 0x76, 0x83, 0xcf, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	Get(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	Count(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) Get(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Storage/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Count(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Storage/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	Get(context.Context, *RpcRequest) (*RpcResponse, error)
	Count(context.Context, *RpcRequest) (*RpcResponse, error)
}

// UnimplementedStorageServer can be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (*UnimplementedStorageServer) Get(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedStorageServer) Count(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Get(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Count(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Storage_Get_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Storage_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}

// TableClient is the client API for Table service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TableClient interface {
	CreateTable(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	DeleteTable(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	DescribeTable(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	ListTables(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
}

type tableClient struct {
	cc *grpc.ClientConn
}

func NewTableClient(cc *grpc.ClientConn) TableClient {
	return &tableClient{cc}
}

func (c *tableClient) CreateTable(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Table/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) DeleteTable(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Table/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) DescribeTable(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Table/DescribeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) ListTables(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Table/ListTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableServer is the server API for Table service.
type TableServer interface {
	CreateTable(context.Context, *RpcRequest) (*RpcResponse, error)
	DeleteTable(context.Context, *RpcRequest) (*RpcResponse, error)
	DescribeTable(context.Context, *RpcRequest) (*RpcResponse, error)
	ListTables(context.Context, *RpcRequest) (*RpcResponse, error)
}

// UnimplementedTableServer can be embedded to have forward compatible implementations.
type UnimplementedTableServer struct {
}

func (*UnimplementedTableServer) CreateTable(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (*UnimplementedTableServer) DeleteTable(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (*UnimplementedTableServer) DescribeTable(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTable not implemented")
}
func (*UnimplementedTableServer) ListTables(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}

func RegisterTableServer(s *grpc.Server, srv TableServer) {
	s.RegisterService(&_Table_serviceDesc, srv)
}

func _Table_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Table/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).CreateTable(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Table/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).DeleteTable(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_DescribeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).DescribeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Table/DescribeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).DescribeTable(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Table/ListTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ListTables(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Table_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Table",
	HandlerType: (*TableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _Table_CreateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _Table_DeleteTable_Handler,
		},
		{
			MethodName: "DescribeTable",
			Handler:    _Table_DescribeTable_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _Table_ListTables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogClient interface {
	Apply(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResponse, error)
}

type logClient struct {
	cc *grpc.ClientConn
}

func NewLogClient(cc *grpc.ClientConn) LogClient {
	return &logClient{cc}
}

func (c *logClient) Apply(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Log/apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServer is the server API for Log service.
type LogServer interface {
	Apply(context.Context, *Entry) (*RpcResponse, error)
}

// UnimplementedLogServer can be embedded to have forward compatible implementations.
type UnimplementedLogServer struct {
}

func (*UnimplementedLogServer) Apply(ctx context.Context, req *Entry) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

func RegisterLogServer(s *grpc.Server, srv LogServer) {
	s.RegisterService(&_Log_serviceDesc, srv)
}

func _Log_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Log/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Apply(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

var _Log_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "apply",
			Handler:    _Log_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}
